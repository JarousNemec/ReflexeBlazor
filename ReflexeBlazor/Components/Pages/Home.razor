@page "/"
@using System.Reflection
@using System.Net
@using ReflexeBlazor.Services
@inject IHostEnvironment Env
@inject CacheService CacheService
@inject FilterService FilterService
@rendermode InteractiveServer


<h3>Select file:</h3>
<InputFile class="form-control" OnChange="OnFileChange"></InputFile>
<div>
    <h5>Filters:</h5>
    <input type="checkbox" @onchange="() => FilterService.ChangeFilter(BindingFlags.Public)" class="form-check-input" id="chckBoxPublic"/>
    <label class="form-check-label" for="chckBoxPublic">Public</label>
    <input type="checkbox" @onchange="() => FilterService.ChangeFilter(BindingFlags.Static)" class="form-check-input" id="chckBoxStatic"/>
    <label class="form-check-label" for="chckBoxStatic">Static</label>
    <input type="checkbox" @onchange="() => FilterService.ChangeFilter(BindingFlags.NonPublic)" class="form-check-input" id="chckBoxNonPublic"/>
    <label class="form-check-label" for="chckBoxNonPublic">Private</label>
</div>

@if (CacheService.Assemblies != null)
{
    foreach (var assembly in CacheService.Assemblies)
    {
        <AssemblyComponent Assembly=@assembly.Value Id=@assembly.Key RemoveAction="@RemoveAssembly"></AssemblyComponent>
    }
}

@code{
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CacheService.GetCachedAssemblies();
            FilterService.OnFilterChange += FilterServiceOnOnFilterChange;
            StateHasChanged();
        }
    }

    private void FilterServiceOnOnFilterChange()
    {
        StateHasChanged();
    }

    private async void OnFileChange(InputFileChangeEventArgs obj)
    {
        await CacheService.AddToCache(obj);
        StateHasChanged();
    }

    public void RemoveAssembly(string id)
    {
        CacheService.RemoveFromCache(id);
        StateHasChanged();
    }

}