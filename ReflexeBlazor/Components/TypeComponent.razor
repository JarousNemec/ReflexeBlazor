@using System.Reflection
@using ReflexeBlazor.Services
@inject FilterService FilterService
@rendermode InteractiveServer
@if (Type != null)
{
    <div style="border: #0a53be solid 3px; border-radius: 10px; margin: 10px; padding: 5px">
        <h3>@(Type.Name)</h3>

        <HiddingComponet>
            <ChildContent>
                @if (Type.IsClass)
                {
                    <span>CLASS</span>
                }
                @if (Type.IsPublic)
                {
                    <span>PUBLIC</span>
                }

                @if (Type.IsEnum)
                {
                    <span>ENUM</span>
                }
                <div>
                    <h4>Properties:</h4>
                    @if (FilterService.FilterFlags.Count > 0)
                    {
                        @foreach (var filter in FilterService.FilterFlags)
                        {
                            foreach (var prop in Type.GetProperties(BindingFlags.DeclaredOnly | filter | BindingFlags.Instance))
                            {
                                <PropInfoComponent Info="prop"></PropInfoComponent>
                            }
                        }
                    }
                    else
                    {
                        foreach (var prop in Type.GetProperties())
                        {
                            <PropInfoComponent Info="prop"></PropInfoComponent>
                        }
                    }

                </div>

                <div>
                    <h4>Methods:</h4>
                    @if (FilterService.FilterFlags.Count > 0)
                    {
                        foreach (var filter in FilterService.FilterFlags)
                        {
                            foreach (var prop in Type.GetMethods(BindingFlags.DeclaredOnly | filter | BindingFlags.Instance))
                            {
                                <MethodInfoComponent Info="prop"></MethodInfoComponent>
                            }
                        }
                    }
                    else
                    {
                        foreach (var prop in Type.GetMethods())
                        {
                            <MethodInfoComponent Info="prop"></MethodInfoComponent>
                        }
                    }

                </div>
            </ChildContent>
        </HiddingComponet>
    </div>
}


@code {
    [Parameter] public Type? Type { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FilterService.OnFilterChange += FilterServiceOnOnFilterChange;
        }
    }


    private void FilterServiceOnOnFilterChange()
    {
        StateHasChanged();
    }

}